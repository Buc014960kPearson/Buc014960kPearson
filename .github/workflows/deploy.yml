on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: '请选择要执行的操作'
        required: true
        default: 'create_repo'
        type: choice
        options:
          - create_repo
          - run_workflow
          - delete_repo

permissions:
  contents: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  job:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # - index: 0
          #   token: "UsfhASy6aZ1egMiSfwVzOJULxkjk4a3dWIGb"
          # - index: 1
          #   token: "rHJLYwIKSB03EfE7cyGQ5b8pKZAL9H4NLJbb"
          # - index: 2
          #   token: "ZnnDi4ZmvVxNBA5lOaX2ojPvFQVtjI4dskvA"
          # - index: 3
          #   token: "XQJK7ceyaehORLLDuEGyfCsNAUvXGr2esaFT"
          # - index: 4
          #   token: "PkFmUgSPpkyWd4jobnKfuEoULFfudT2NBWhj"
          - index: 5
            token: "cL8IBiDAG7bVokwttyS5fbmtjcOdTP3Iw3I5"
    env:
      TZ: Asia/Shanghai
      TOKEN: "ghp_${{ matrix.token }}"

    steps:
      - name: 登录
        run: |
          echo $TOKEN | gh auth login --with-token
          gh auth status

          GITHUB_USER=$(gh api user --jq .login)
          echo "GITHUB_USER=$GITHUB_USER" >> $GITHUB_ENV

      - name: 创建仓库
        if: ${{ github.event.inputs.action == 'create_repo' }}
        run: |
          echo "=== 随机获取一个 public 仓库并克隆到本地 ==="
          RANDOM_SINCE=$(shuf -i $GITHUB_REPOSITORY_ID-$((GITHUB_REPOSITORY_ID - 1000000)) -n 1)
          echo "RANDOM_SINCE=$RANDOM_SINCE"
          REPO_API="https://api.github.com/repositories?since=${RANDOM_SINCE}"
          REPO_JSON=$(curl -s "$REPO_API")
          REPO_FULL_NAME=$(echo "$REPO_JSON" | jq -r '.[0].full_name')
          REPO_NAME=$(basename "$REPO_FULL_NAME")
          echo "随机选中的仓库：$REPO_FULL_NAME，仓库名：$REPO_NAME"
          echo "开始克隆仓库..."
          git clone "https://github.com/${REPO_FULL_NAME}.git"
          cd "$REPO_NAME"
          echo "仓库克隆完成，进入目录 $REPO_NAME"

          echo "=== 获取原仓库最后一次提交的信息 ==="
          LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          LAST_COMMIT_AUTHOR_NAME=$(git log -1 --pretty=%an)
          LAST_COMMIT_AUTHOR_EMAIL=$(git log -1 --pretty=%ae)
          LAST_COMMIT_AUTHOR_DATE=$(git log -1 --pretty=%ad --date=iso-strict)
          echo "最后提交信息：$LAST_COMMIT_MESSAGE"
          echo "最后提交作者：$LAST_COMMIT_AUTHOR_NAME <$LAST_COMMIT_AUTHOR_EMAIL> at $LAST_COMMIT_AUTHOR_DATE"

          echo "=== 清除历史，只保留最新一次提交 ==="
          git config user.name "$LAST_COMMIT_AUTHOR_NAME"
          git config user.email "$LAST_COMMIT_AUTHOR_EMAIL"
          git checkout --orphan latest_branch
          git add -A
          GIT_AUTHOR_NAME="$LAST_COMMIT_AUTHOR_NAME" \
          GIT_AUTHOR_EMAIL="$LAST_COMMIT_AUTHOR_EMAIL" \
          GIT_AUTHOR_DATE="$LAST_COMMIT_AUTHOR_DATE" \
          GIT_COMMITTER_NAME="$LAST_COMMIT_AUTHOR_NAME" \
          GIT_COMMITTER_EMAIL="$LAST_COMMIT_AUTHOR_EMAIL" \
          GIT_COMMITTER_DATE="$LAST_COMMIT_AUTHOR_DATE" \
          git commit -m "$LAST_COMMIT_MESSAGE"
          echo "只保留一条 commit 完成"
          git branch -D main 2>/dev/null || echo "main 分支不存在可忽略"
          git branch -m main
          echo "分支重命名完成"

          echo "=== 在 GitHub 上新建同名私有仓库，并推送(只保留一条提交记录) ==="
          gh repo create "$GITHUB_USER/$REPO_NAME" --private
          echo "私有仓库创建完成"
          git remote remove origin
          git remote add origin "https://$TOKEN@github.com/$GITHUB_USER/$REPO_NAME.git"
          echo "开始强制推送到新仓库..."
          git push -f origin main
          echo "推送完成，仓库部署流程结束"

      - name: 执行
        if: ${{ github.event.inputs.action == 'run_workflow' }}
        run: |
          echo "=== 获取最新推送的仓库 ==="
          REPO_URL=$(gh api 'user/repos?sort=pushed&direction=desc&per_page=1' --jq '.[0].clone_url')
          REPO_URL_WITH_TOKEN=$(echo "$REPO_URL" | sed "s#https://#https://$TOKEN@#")
          git clone $REPO_URL_WITH_TOKEN
          echo "克隆完成"
          REPO_NAME=$(basename "$REPO_URL" .git)
          cd "$REPO_NAME"
          gh workflow list
          gh workflow run build.yml --field start_index=$((40 * ${{ matrix.index }})) --field batch_size=40
          echo "执行完成"

      - name: 删除仓库
        if: ${{ github.event.inputs.action == 'delete_repo' }}
        run: |
          echo "=== 开始删除所有仓库 ==="
          gh repo list "$GITHUB_USER" --limit 1000 --json name -q '.[].name' | while read repo; do
            echo "正在删除 $repo ..."
            gh repo delete "$GITHUB_USER/$repo" --yes
          done
          echo "所有仓库已删除。"